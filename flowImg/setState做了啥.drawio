<mxfile host="65bd71144e">
    <diagram id="C5RBs43oDa-KdzZeNtuy" name="Page-1">
        <mxGraphModel dx="1155" dy="1270" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
            <root>
                <mxCell id="WIyWlLk6GJQsqaUBKTNV-0"/>
                <mxCell id="WIyWlLk6GJQsqaUBKTNV-1" parent="WIyWlLk6GJQsqaUBKTNV-0"/>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-2" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="IYK3fqMo99DbD8XpyxVQ-1" edge="1">
                    <mxGeometry relative="1" as="geometry">
                        <mxPoint x="180" y="130" as="targetPoint"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-1" value="代码中触发setState" style="rounded=1;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="120" y="20" width="120" height="60" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-3" value="实质上是触发enqueueSetState 方法" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="180" y="90" width="210" height="20" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-4" value="" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f5f5f5;fontColor=#333333;strokeColor=#666666;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="120" y="140" width="330" height="680" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-5" value="&lt;span&gt;enqueueSetState 流程&lt;/span&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="240" y="140" width="200" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-9" value="&lt;meta charset=&quot;utf-8&quot;&gt;&lt;div style=&quot;color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: menlo, monaco, &amp;quot;courier new&amp;quot;, monospace; font-weight: normal; font-size: 14px; line-height: 21px;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;enqueueSetState&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;inst&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;payload&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;callback&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;fiber&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;getInstance&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;inst&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;); &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;eventTime&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;requestEventTime&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;suspenseConfig&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;requestCurrentSuspenseConfig&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;lane&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;requestUpdateLane&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;fiber&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;suspenseConfig&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #6a9955&quot;&gt;// 根据事件优先级发返回一个lane&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;update&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;createUpdate&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;eventTime&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;lane&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;suspenseConfig&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;); &lt;/span&gt;&lt;span style=&quot;color: #6a9955&quot;&gt;// 将最终获取的lane存放在update对象在，在react一次更新过程中，每个fiber对象上的update都有机会被执行&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color: #6a9955&quot;&gt;// 而这个执行的判断方式就是看 每个update的lane 是否在root.renderlanes中。如果是，就代表优先级足够，应该在本次更新被执行。否则会被推迟到下一次更新过程中继续判断是否执行。&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;update&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;payload&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;payload&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #c586c0&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;callback&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; !== &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;undefined&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; &amp;amp;&amp;amp; &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;callback&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; !== &lt;/span&gt;&lt;span style=&quot;color: #569cd6&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #c586c0&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;__DEV__&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;        &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;warnOnInvalidCallback&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;callback&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #ce9178&quot;&gt;'setState'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;      }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;      &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;update&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;callback&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt; = &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;callback&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #6a9955&quot;&gt;//将当前setState产生的update对象放在fiber.updateQueue.shared.pending上。形成的是一个环形链表&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;enqueueUpdate&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;fiber&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;update&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;log&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ce9178&quot;&gt;'fiber pendingQue ====&amp;gt;'&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;fiber&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;updateQueue&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;shared&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #9cdcfe&quot;&gt;pending&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #dcdcaa&quot;&gt;scheduleUpdateOnFiber&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;fiber&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;lane&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #4fc1ff&quot;&gt;eventTime&lt;/span&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #d4d4d4&quot;&gt;  },&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="470" y="220" width="850" height="430" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-19" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="IYK3fqMo99DbD8XpyxVQ-16" target="IYK3fqMo99DbD8XpyxVQ-18" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-16" value="1. 获取类实例上属性&lt;span style=&quot;color: rgb(156 , 220 , 254) ; font-family: &amp;#34;menlo&amp;#34; , &amp;#34;monaco&amp;#34; , &amp;#34;courier new&amp;#34; , monospace ; font-size: 14px ; background-color: rgb(30 , 30 , 30)&quot;&gt;_reactInternals&lt;/span&gt;&lt;br&gt;这就是类实例对应的fibei对象" style="shape=ext;double=1;rounded=0;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="160" y="180" width="220" height="70" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-21" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="IYK3fqMo99DbD8XpyxVQ-18" target="IYK3fqMo99DbD8XpyxVQ-20" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-18" value="2.获取当前的时间触发时间（注意这里会保证同一个事件里面触发的多个setState获取的时间都是一致的）" style="shape=ext;double=1;rounded=0;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="160" y="270" width="220" height="80" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-24" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="IYK3fqMo99DbD8XpyxVQ-20" target="IYK3fqMo99DbD8XpyxVQ-22" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-20" value="3. 根据触发的事件优先级，返回对应的lane（这个lane决定了这次更新对象的执行时机）" style="shape=ext;double=1;rounded=0;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="160" y="380" width="220" height="90" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-31" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="IYK3fqMo99DbD8XpyxVQ-22" target="IYK3fqMo99DbD8XpyxVQ-27" edge="1">
                    <mxGeometry relative="1" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-22" value="4.创建一个更新对象，更新对象的payload就是setState时传入的参数（值/更新函数）" style="shape=ext;double=1;rounded=0;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="160" y="494.5" width="220" height="85.5" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-27" value="5.会在fiber上创建一个单向循环链表。会在render阶段时，根据这个环状链表计算出fiber最新的状态。" style="shape=ext;double=1;rounded=0;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="160" y="600" width="220" height="95" as="geometry"/>
                </mxCell>
                <mxCell id="IYK3fqMo99DbD8XpyxVQ-32" value="6.scheduleUpdateOnFiber启动React的一次更新调度过程。" style="shape=ext;double=1;rounded=0;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
                    <mxGeometry x="159" y="720" width="220" height="80" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>